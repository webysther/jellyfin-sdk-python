# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BaseItemPersonImageBlurHashes(BaseModel):
    """
    Gets or sets the primary image blurhash.
    """ # noqa: E501
    primary: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Primary")
    art: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Art")
    backdrop: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Backdrop")
    banner: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Banner")
    logo: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Logo")
    thumb: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Thumb")
    disc: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Disc")
    box: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Box")
    screenshot: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Screenshot")
    menu: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Menu")
    chapter: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Chapter")
    box_rear: Optional[Dict[str, StrictStr]] = Field(default=None, alias="BoxRear")
    profile: Optional[Dict[str, StrictStr]] = Field(default=None, alias="Profile")
    __properties: ClassVar[List[str]] = ["Primary", "Art", "Backdrop", "Banner", "Logo", "Thumb", "Disc", "Box", "Screenshot", "Menu", "Chapter", "BoxRear", "Profile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BaseItemPersonImageBlurHashes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BaseItemPersonImageBlurHashes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Primary": obj.get("Primary"),
            "Art": obj.get("Art"),
            "Backdrop": obj.get("Backdrop"),
            "Banner": obj.get("Banner"),
            "Logo": obj.get("Logo"),
            "Thumb": obj.get("Thumb"),
            "Disc": obj.get("Disc"),
            "Box": obj.get("Box"),
            "Screenshot": obj.get("Screenshot"),
            "Menu": obj.get("Menu"),
            "Chapter": obj.get("Chapter"),
            "BoxRear": obj.get("BoxRear"),
            "Profile": obj.get("Profile")
        })
        return _obj


