# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from jellyfin.generated.api_10_11.models.version_info import VersionInfo
from typing import Optional, Set
from typing_extensions import Self

class PackageInfo(BaseModel):
    """
    Class PackageInfo.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name.")
    description: Optional[StrictStr] = Field(default=None, description="Gets or sets a long description of the plugin containing features or helpful explanations.")
    overview: Optional[StrictStr] = Field(default=None, description="Gets or sets a short overview of what the plugin does.")
    owner: Optional[StrictStr] = Field(default=None, description="Gets or sets the owner.")
    category: Optional[StrictStr] = Field(default=None, description="Gets or sets the category.")
    guid: Optional[UUID] = Field(default=None, description="Gets or sets the guid of the assembly associated with this plugin.  This is used to identify the proper item for automatic updates.")
    versions: Optional[List[VersionInfo]] = Field(default=None, description="Gets or sets the versions.")
    image_url: Optional[StrictStr] = Field(default=None, description="Gets or sets the image url for the package.", alias="imageUrl")
    __properties: ClassVar[List[str]] = ["name", "description", "overview", "owner", "category", "guid", "versions", "imageUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in versions (list)
        _items = []
        if self.versions:
            for _item_versions in self.versions:
                if _item_versions:
                    _items.append(_item_versions.to_dict())
            _dict['versions'] = _items
        # set to None if image_url (nullable) is None
        # and model_fields_set contains the field
        if self.image_url is None and "image_url" in self.model_fields_set:
            _dict['imageUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "overview": obj.get("overview"),
            "owner": obj.get("owner"),
            "category": obj.get("category"),
            "guid": obj.get("guid"),
            "versions": [VersionInfo.from_dict(_item) for _item in obj["versions"]] if obj.get("versions") is not None else None,
            "imageUrl": obj.get("imageUrl")
        })
        return _obj


