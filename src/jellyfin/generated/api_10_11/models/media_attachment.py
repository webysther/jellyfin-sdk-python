# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MediaAttachment(BaseModel):
    """
    Class MediaAttachment.
    """ # noqa: E501
    codec: Optional[StrictStr] = Field(default=None, description="Gets or sets the codec.", alias="Codec")
    codec_tag: Optional[StrictStr] = Field(default=None, description="Gets or sets the codec tag.", alias="CodecTag")
    comment: Optional[StrictStr] = Field(default=None, description="Gets or sets the comment.", alias="Comment")
    index: Optional[StrictInt] = Field(default=None, description="Gets or sets the index.", alias="Index")
    file_name: Optional[StrictStr] = Field(default=None, description="Gets or sets the filename.", alias="FileName")
    mime_type: Optional[StrictStr] = Field(default=None, description="Gets or sets the MIME type.", alias="MimeType")
    delivery_url: Optional[StrictStr] = Field(default=None, description="Gets or sets the delivery URL.", alias="DeliveryUrl")
    __properties: ClassVar[List[str]] = ["Codec", "CodecTag", "Comment", "Index", "FileName", "MimeType", "DeliveryUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediaAttachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if codec (nullable) is None
        # and model_fields_set contains the field
        if self.codec is None and "codec" in self.model_fields_set:
            _dict['Codec'] = None

        # set to None if codec_tag (nullable) is None
        # and model_fields_set contains the field
        if self.codec_tag is None and "codec_tag" in self.model_fields_set:
            _dict['CodecTag'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['Comment'] = None

        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['FileName'] = None

        # set to None if mime_type (nullable) is None
        # and model_fields_set contains the field
        if self.mime_type is None and "mime_type" in self.model_fields_set:
            _dict['MimeType'] = None

        # set to None if delivery_url (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_url is None and "delivery_url" in self.model_fields_set:
            _dict['DeliveryUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediaAttachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Codec": obj.get("Codec"),
            "CodecTag": obj.get("CodecTag"),
            "Comment": obj.get("Comment"),
            "Index": obj.get("Index"),
            "FileName": obj.get("FileName"),
            "MimeType": obj.get("MimeType"),
            "DeliveryUrl": obj.get("DeliveryUrl")
        })
        return _obj


