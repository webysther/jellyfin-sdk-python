# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubtitleOptions(BaseModel):
    """
    SubtitleOptions
    """ # noqa: E501
    skip_if_embedded_subtitles_present: Optional[StrictBool] = Field(default=None, alias="SkipIfEmbeddedSubtitlesPresent")
    skip_if_audio_track_matches: Optional[StrictBool] = Field(default=None, alias="SkipIfAudioTrackMatches")
    download_languages: Optional[List[StrictStr]] = Field(default=None, alias="DownloadLanguages")
    download_movie_subtitles: Optional[StrictBool] = Field(default=None, alias="DownloadMovieSubtitles")
    download_episode_subtitles: Optional[StrictBool] = Field(default=None, alias="DownloadEpisodeSubtitles")
    open_subtitles_username: Optional[StrictStr] = Field(default=None, alias="OpenSubtitlesUsername")
    open_subtitles_password_hash: Optional[StrictStr] = Field(default=None, alias="OpenSubtitlesPasswordHash")
    is_open_subtitle_vip_account: Optional[StrictBool] = Field(default=None, alias="IsOpenSubtitleVipAccount")
    require_perfect_match: Optional[StrictBool] = Field(default=None, alias="RequirePerfectMatch")
    __properties: ClassVar[List[str]] = ["SkipIfEmbeddedSubtitlesPresent", "SkipIfAudioTrackMatches", "DownloadLanguages", "DownloadMovieSubtitles", "DownloadEpisodeSubtitles", "OpenSubtitlesUsername", "OpenSubtitlesPasswordHash", "IsOpenSubtitleVipAccount", "RequirePerfectMatch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubtitleOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if download_languages (nullable) is None
        # and model_fields_set contains the field
        if self.download_languages is None and "download_languages" in self.model_fields_set:
            _dict['DownloadLanguages'] = None

        # set to None if open_subtitles_username (nullable) is None
        # and model_fields_set contains the field
        if self.open_subtitles_username is None and "open_subtitles_username" in self.model_fields_set:
            _dict['OpenSubtitlesUsername'] = None

        # set to None if open_subtitles_password_hash (nullable) is None
        # and model_fields_set contains the field
        if self.open_subtitles_password_hash is None and "open_subtitles_password_hash" in self.model_fields_set:
            _dict['OpenSubtitlesPasswordHash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubtitleOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SkipIfEmbeddedSubtitlesPresent": obj.get("SkipIfEmbeddedSubtitlesPresent"),
            "SkipIfAudioTrackMatches": obj.get("SkipIfAudioTrackMatches"),
            "DownloadLanguages": obj.get("DownloadLanguages"),
            "DownloadMovieSubtitles": obj.get("DownloadMovieSubtitles"),
            "DownloadEpisodeSubtitles": obj.get("DownloadEpisodeSubtitles"),
            "OpenSubtitlesUsername": obj.get("OpenSubtitlesUsername"),
            "OpenSubtitlesPasswordHash": obj.get("OpenSubtitlesPasswordHash"),
            "IsOpenSubtitleVipAccount": obj.get("IsOpenSubtitleVipAccount"),
            "RequirePerfectMatch": obj.get("RequirePerfectMatch")
        })
        return _obj


