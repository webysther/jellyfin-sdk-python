# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from jellyfin.generated.api_10_11.models.theme_media_result import ThemeMediaResult
from typing import Optional, Set
from typing_extensions import Self

class AllThemeMediaResult(BaseModel):
    """
    AllThemeMediaResult
    """ # noqa: E501
    theme_videos_result: Optional[ThemeMediaResult] = Field(default=None, description="Class ThemeMediaResult.", alias="ThemeVideosResult")
    theme_songs_result: Optional[ThemeMediaResult] = Field(default=None, description="Class ThemeMediaResult.", alias="ThemeSongsResult")
    soundtrack_songs_result: Optional[ThemeMediaResult] = Field(default=None, description="Class ThemeMediaResult.", alias="SoundtrackSongsResult")
    __properties: ClassVar[List[str]] = ["ThemeVideosResult", "ThemeSongsResult", "SoundtrackSongsResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllThemeMediaResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of theme_videos_result
        if self.theme_videos_result:
            _dict['ThemeVideosResult'] = self.theme_videos_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of theme_songs_result
        if self.theme_songs_result:
            _dict['ThemeSongsResult'] = self.theme_songs_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of soundtrack_songs_result
        if self.soundtrack_songs_result:
            _dict['SoundtrackSongsResult'] = self.soundtrack_songs_result.to_dict()
        # set to None if theme_videos_result (nullable) is None
        # and model_fields_set contains the field
        if self.theme_videos_result is None and "theme_videos_result" in self.model_fields_set:
            _dict['ThemeVideosResult'] = None

        # set to None if theme_songs_result (nullable) is None
        # and model_fields_set contains the field
        if self.theme_songs_result is None and "theme_songs_result" in self.model_fields_set:
            _dict['ThemeSongsResult'] = None

        # set to None if soundtrack_songs_result (nullable) is None
        # and model_fields_set contains the field
        if self.soundtrack_songs_result is None and "soundtrack_songs_result" in self.model_fields_set:
            _dict['SoundtrackSongsResult'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllThemeMediaResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ThemeVideosResult": ThemeMediaResult.from_dict(obj["ThemeVideosResult"]) if obj.get("ThemeVideosResult") is not None else None,
            "ThemeSongsResult": ThemeMediaResult.from_dict(obj["ThemeSongsResult"]) if obj.get("ThemeSongsResult") is not None else None,
            "SoundtrackSongsResult": ThemeMediaResult.from_dict(obj["SoundtrackSongsResult"]) if obj.get("SoundtrackSongsResult") is not None else None
        })
        return _obj


