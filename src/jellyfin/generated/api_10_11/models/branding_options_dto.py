# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BrandingOptionsDto(BaseModel):
    """
    The branding options DTO for API use.  This DTO excludes SplashscreenLocation to prevent it from being updated via API.
    """ # noqa: E501
    login_disclaimer: Optional[StrictStr] = Field(default=None, description="Gets or sets the login disclaimer.", alias="LoginDisclaimer")
    custom_css: Optional[StrictStr] = Field(default=None, description="Gets or sets the custom CSS.", alias="CustomCss")
    splashscreen_enabled: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether to enable the splashscreen.", alias="SplashscreenEnabled")
    __properties: ClassVar[List[str]] = ["LoginDisclaimer", "CustomCss", "SplashscreenEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrandingOptionsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if login_disclaimer (nullable) is None
        # and model_fields_set contains the field
        if self.login_disclaimer is None and "login_disclaimer" in self.model_fields_set:
            _dict['LoginDisclaimer'] = None

        # set to None if custom_css (nullable) is None
        # and model_fields_set contains the field
        if self.custom_css is None and "custom_css" in self.model_fields_set:
            _dict['CustomCss'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrandingOptionsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LoginDisclaimer": obj.get("LoginDisclaimer"),
            "CustomCss": obj.get("CustomCss"),
            "SplashscreenEnabled": obj.get("SplashscreenEnabled")
        })
        return _obj


