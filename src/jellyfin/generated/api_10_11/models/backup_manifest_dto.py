# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from jellyfin.generated.api_10_11.models.backup_options_dto import BackupOptionsDto
from typing import Optional, Set
from typing_extensions import Self

class BackupManifestDto(BaseModel):
    """
    Manifest type for backups internal structure.
    """ # noqa: E501
    server_version: Optional[StrictStr] = Field(default=None, description="Gets or sets the jellyfin version this backup was created with.", alias="ServerVersion")
    backup_engine_version: Optional[StrictStr] = Field(default=None, description="Gets or sets the backup engine version this backup was created with.", alias="BackupEngineVersion")
    date_created: Optional[datetime] = Field(default=None, description="Gets or sets the date this backup was created with.", alias="DateCreated")
    path: Optional[StrictStr] = Field(default=None, description="Gets or sets the path to the backup on the system.", alias="Path")
    options: Optional[BackupOptionsDto] = Field(default=None, description="Gets or sets the contents of the backup archive.", alias="Options")
    __properties: ClassVar[List[str]] = ["ServerVersion", "BackupEngineVersion", "DateCreated", "Path", "Options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupManifestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['Options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupManifestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ServerVersion": obj.get("ServerVersion"),
            "BackupEngineVersion": obj.get("BackupEngineVersion"),
            "DateCreated": obj.get("DateCreated"),
            "Path": obj.get("Path"),
            "Options": BackupOptionsDto.from_dict(obj["Options"]) if obj.get("Options") is not None else None
        })
        return _obj


