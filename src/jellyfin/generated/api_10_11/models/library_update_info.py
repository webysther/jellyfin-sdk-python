# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LibraryUpdateInfo(BaseModel):
    """
    Class LibraryUpdateInfo.
    """ # noqa: E501
    folders_added_to: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the folders added to.", alias="FoldersAddedTo")
    folders_removed_from: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the folders removed from.", alias="FoldersRemovedFrom")
    items_added: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the items added.", alias="ItemsAdded")
    items_removed: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the items removed.", alias="ItemsRemoved")
    items_updated: Optional[List[StrictStr]] = Field(default=None, description="Gets or sets the items updated.", alias="ItemsUpdated")
    collection_folders: Optional[List[StrictStr]] = Field(default=None, alias="CollectionFolders")
    is_empty: Optional[StrictBool] = Field(default=None, alias="IsEmpty")
    __properties: ClassVar[List[str]] = ["FoldersAddedTo", "FoldersRemovedFrom", "ItemsAdded", "ItemsRemoved", "ItemsUpdated", "CollectionFolders", "IsEmpty"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LibraryUpdateInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_empty",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LibraryUpdateInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FoldersAddedTo": obj.get("FoldersAddedTo"),
            "FoldersRemovedFrom": obj.get("FoldersRemovedFrom"),
            "ItemsAdded": obj.get("ItemsAdded"),
            "ItemsRemoved": obj.get("ItemsRemoved"),
            "ItemsUpdated": obj.get("ItemsUpdated"),
            "CollectionFolders": obj.get("CollectionFolders"),
            "IsEmpty": obj.get("IsEmpty")
        })
        return _obj


