# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class UploadSubtitleDto(BaseModel):
    """
    Upload subtitles dto.
    """ # noqa: E501
    language: StrictStr = Field(description="Gets or sets the subtitle language.", alias="Language")
    format: StrictStr = Field(description="Gets or sets the subtitle format.", alias="Format")
    is_forced: StrictBool = Field(description="Gets or sets a value indicating whether the subtitle is forced.", alias="IsForced")
    is_hearing_impaired: StrictBool = Field(description="Gets or sets a value indicating whether the subtitle is for hearing impaired.", alias="IsHearingImpaired")
    data: StrictStr = Field(description="Gets or sets the subtitle data.", alias="Data")
    __properties: ClassVar[List[str]] = ["Language", "Format", "IsForced", "IsHearingImpaired", "Data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadSubtitleDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadSubtitleDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Language": obj.get("Language"),
            "Format": obj.get("Format"),
            "IsForced": obj.get("IsForced"),
            "IsHearingImpaired": obj.get("IsHearingImpaired"),
            "Data": obj.get("Data")
        })
        return _obj


