# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from jellyfin.generated.api_10_11.models.sync_play_group_does_not_exist_update import SyncPlayGroupDoesNotExistUpdate
from jellyfin.generated.api_10_11.models.sync_play_group_joined_update import SyncPlayGroupJoinedUpdate
from jellyfin.generated.api_10_11.models.sync_play_group_left_update import SyncPlayGroupLeftUpdate
from jellyfin.generated.api_10_11.models.sync_play_library_access_denied_update import SyncPlayLibraryAccessDeniedUpdate
from jellyfin.generated.api_10_11.models.sync_play_not_in_group_update import SyncPlayNotInGroupUpdate
from jellyfin.generated.api_10_11.models.sync_play_play_queue_update import SyncPlayPlayQueueUpdate
from jellyfin.generated.api_10_11.models.sync_play_state_update import SyncPlayStateUpdate
from jellyfin.generated.api_10_11.models.sync_play_user_joined_update import SyncPlayUserJoinedUpdate
from jellyfin.generated.api_10_11.models.sync_play_user_left_update import SyncPlayUserLeftUpdate
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

GROUPUPDATE_ONE_OF_SCHEMAS = ["SyncPlayGroupDoesNotExistUpdate", "SyncPlayGroupJoinedUpdate", "SyncPlayGroupLeftUpdate", "SyncPlayLibraryAccessDeniedUpdate", "SyncPlayNotInGroupUpdate", "SyncPlayPlayQueueUpdate", "SyncPlayStateUpdate", "SyncPlayUserJoinedUpdate", "SyncPlayUserLeftUpdate"]

class GroupUpdate(BaseModel):
    """
    Represents the list of possible group update types
    """
    # data type: SyncPlayGroupDoesNotExistUpdate
    oneof_schema_1_validator: Optional[SyncPlayGroupDoesNotExistUpdate] = None
    # data type: SyncPlayGroupJoinedUpdate
    oneof_schema_2_validator: Optional[SyncPlayGroupJoinedUpdate] = None
    # data type: SyncPlayGroupLeftUpdate
    oneof_schema_3_validator: Optional[SyncPlayGroupLeftUpdate] = None
    # data type: SyncPlayLibraryAccessDeniedUpdate
    oneof_schema_4_validator: Optional[SyncPlayLibraryAccessDeniedUpdate] = None
    # data type: SyncPlayNotInGroupUpdate
    oneof_schema_5_validator: Optional[SyncPlayNotInGroupUpdate] = None
    # data type: SyncPlayPlayQueueUpdate
    oneof_schema_6_validator: Optional[SyncPlayPlayQueueUpdate] = None
    # data type: SyncPlayStateUpdate
    oneof_schema_7_validator: Optional[SyncPlayStateUpdate] = None
    # data type: SyncPlayUserJoinedUpdate
    oneof_schema_8_validator: Optional[SyncPlayUserJoinedUpdate] = None
    # data type: SyncPlayUserLeftUpdate
    oneof_schema_9_validator: Optional[SyncPlayUserLeftUpdate] = None
    actual_instance: Optional[Union[SyncPlayGroupDoesNotExistUpdate, SyncPlayGroupJoinedUpdate, SyncPlayGroupLeftUpdate, SyncPlayLibraryAccessDeniedUpdate, SyncPlayNotInGroupUpdate, SyncPlayPlayQueueUpdate, SyncPlayStateUpdate, SyncPlayUserJoinedUpdate, SyncPlayUserLeftUpdate]] = None
    one_of_schemas: Set[str] = { "SyncPlayGroupDoesNotExistUpdate", "SyncPlayGroupJoinedUpdate", "SyncPlayGroupLeftUpdate", "SyncPlayLibraryAccessDeniedUpdate", "SyncPlayNotInGroupUpdate", "SyncPlayPlayQueueUpdate", "SyncPlayStateUpdate", "SyncPlayUserJoinedUpdate", "SyncPlayUserLeftUpdate" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GroupUpdate.model_construct()
        error_messages = []
        match = 0
        # validate data type: SyncPlayGroupDoesNotExistUpdate
        if not isinstance(v, SyncPlayGroupDoesNotExistUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayGroupDoesNotExistUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayGroupJoinedUpdate
        if not isinstance(v, SyncPlayGroupJoinedUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayGroupJoinedUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayGroupLeftUpdate
        if not isinstance(v, SyncPlayGroupLeftUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayGroupLeftUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayLibraryAccessDeniedUpdate
        if not isinstance(v, SyncPlayLibraryAccessDeniedUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayLibraryAccessDeniedUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayNotInGroupUpdate
        if not isinstance(v, SyncPlayNotInGroupUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayNotInGroupUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayPlayQueueUpdate
        if not isinstance(v, SyncPlayPlayQueueUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayPlayQueueUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayStateUpdate
        if not isinstance(v, SyncPlayStateUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayStateUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayUserJoinedUpdate
        if not isinstance(v, SyncPlayUserJoinedUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayUserJoinedUpdate`")
        else:
            match += 1
        # validate data type: SyncPlayUserLeftUpdate
        if not isinstance(v, SyncPlayUserLeftUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SyncPlayUserLeftUpdate`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GroupUpdate with oneOf schemas: SyncPlayGroupDoesNotExistUpdate, SyncPlayGroupJoinedUpdate, SyncPlayGroupLeftUpdate, SyncPlayLibraryAccessDeniedUpdate, SyncPlayNotInGroupUpdate, SyncPlayPlayQueueUpdate, SyncPlayStateUpdate, SyncPlayUserJoinedUpdate, SyncPlayUserLeftUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GroupUpdate with oneOf schemas: SyncPlayGroupDoesNotExistUpdate, SyncPlayGroupJoinedUpdate, SyncPlayGroupLeftUpdate, SyncPlayLibraryAccessDeniedUpdate, SyncPlayNotInGroupUpdate, SyncPlayPlayQueueUpdate, SyncPlayStateUpdate, SyncPlayUserJoinedUpdate, SyncPlayUserLeftUpdate. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SyncPlayGroupDoesNotExistUpdate
        try:
            instance.actual_instance = SyncPlayGroupDoesNotExistUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayGroupJoinedUpdate
        try:
            instance.actual_instance = SyncPlayGroupJoinedUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayGroupLeftUpdate
        try:
            instance.actual_instance = SyncPlayGroupLeftUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayLibraryAccessDeniedUpdate
        try:
            instance.actual_instance = SyncPlayLibraryAccessDeniedUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayNotInGroupUpdate
        try:
            instance.actual_instance = SyncPlayNotInGroupUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayPlayQueueUpdate
        try:
            instance.actual_instance = SyncPlayPlayQueueUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayStateUpdate
        try:
            instance.actual_instance = SyncPlayStateUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayUserJoinedUpdate
        try:
            instance.actual_instance = SyncPlayUserJoinedUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SyncPlayUserLeftUpdate
        try:
            instance.actual_instance = SyncPlayUserLeftUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GroupUpdate with oneOf schemas: SyncPlayGroupDoesNotExistUpdate, SyncPlayGroupJoinedUpdate, SyncPlayGroupLeftUpdate, SyncPlayLibraryAccessDeniedUpdate, SyncPlayNotInGroupUpdate, SyncPlayPlayQueueUpdate, SyncPlayStateUpdate, SyncPlayUserJoinedUpdate, SyncPlayUserLeftUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GroupUpdate with oneOf schemas: SyncPlayGroupDoesNotExistUpdate, SyncPlayGroupJoinedUpdate, SyncPlayGroupLeftUpdate, SyncPlayLibraryAccessDeniedUpdate, SyncPlayNotInGroupUpdate, SyncPlayPlayQueueUpdate, SyncPlayStateUpdate, SyncPlayUserJoinedUpdate, SyncPlayUserLeftUpdate. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], SyncPlayGroupDoesNotExistUpdate, SyncPlayGroupJoinedUpdate, SyncPlayGroupLeftUpdate, SyncPlayLibraryAccessDeniedUpdate, SyncPlayNotInGroupUpdate, SyncPlayPlayQueueUpdate, SyncPlayStateUpdate, SyncPlayUserJoinedUpdate, SyncPlayUserLeftUpdate]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


