# coding: utf-8

"""
    Jellyfin API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 10.10.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from jellyfin.generated.api_10_10.models.image_type import ImageType
from typing import Optional, Set
from typing_extensions import Self

class ImageInfo(BaseModel):
    """
    Class ImageInfo.
    """ # noqa: E501
    image_type: Optional[ImageType] = Field(default=None, alias="ImageType")
    image_index: Optional[StrictInt] = Field(default=None, description="Gets or sets the index of the image.", alias="ImageIndex")
    image_tag: Optional[StrictStr] = Field(default=None, description="Gets or sets the image tag.", alias="ImageTag")
    path: Optional[StrictStr] = Field(default=None, description="Gets or sets the path.", alias="Path")
    blur_hash: Optional[StrictStr] = Field(default=None, description="Gets or sets the blurhash.", alias="BlurHash")
    height: Optional[StrictInt] = Field(default=None, description="Gets or sets the height.", alias="Height")
    width: Optional[StrictInt] = Field(default=None, description="Gets or sets the width.", alias="Width")
    size: Optional[StrictInt] = Field(default=None, description="Gets or sets the size.", alias="Size")
    __properties: ClassVar[List[str]] = ["ImageType", "ImageIndex", "ImageTag", "Path", "BlurHash", "Height", "Width", "Size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if image_index (nullable) is None
        # and model_fields_set contains the field
        if self.image_index is None and "image_index" in self.model_fields_set:
            _dict['ImageIndex'] = None

        # set to None if image_tag (nullable) is None
        # and model_fields_set contains the field
        if self.image_tag is None and "image_tag" in self.model_fields_set:
            _dict['ImageTag'] = None

        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['Path'] = None

        # set to None if blur_hash (nullable) is None
        # and model_fields_set contains the field
        if self.blur_hash is None and "blur_hash" in self.model_fields_set:
            _dict['BlurHash'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['Height'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['Width'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ImageType": obj.get("ImageType"),
            "ImageIndex": obj.get("ImageIndex"),
            "ImageTag": obj.get("ImageTag"),
            "Path": obj.get("Path"),
            "BlurHash": obj.get("BlurHash"),
            "Height": obj.get("Height"),
            "Width": obj.get("Width"),
            "Size": obj.get("Size")
        })
        return _obj


